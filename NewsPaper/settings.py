"""
Django settings for NewsPaper project.

Generated by 'django-admin startproject' using Django 4.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
#### User Imports ####
import os
#from decouple import config
#### User Imports ####

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-38!a9%9kks4&1-1&ed=9ez0dzvwqr3hyvfarg#@y)&e$3*xula'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # подключаем ещё приложения
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'django_apscheduler',
    # для создания копий бд django-dbbackup
    'dbbackup',
    # для отправки почты
    #'mailslurp',
    #'mailslurp_client',
    #########
    # 3rd party apps
    #########
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    # ... здесь нужно указать провайдеров, которых планируется использовать
    'allauth.socialaccount.providers.google',
### User apps ###
    #'news',
    'accounts',
    'news.apps.NewsConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # Add the account middleware for django-allauth:
    "allauth.account.middleware.AccountMiddleware",
]

ROOT_URLCONF = 'NewsPaper.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],
        ### User Dirs ###
        'DIRS': [
            os.path.join(BASE_DIR, 'templates').replace('\\', '/'),
        ],
        ### End of User Dirs ###
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.contrib.messages.context_processors.messages',
                'NewsPaper.context_processors.site_domain',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPaper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

#TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# User added settings
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

SITE_ID = 1

SITE_DOMAIN = 'http://127.0.0.1:8000'

# использовать русский язык для локализации проекта
#LANGUAGE_CODE = 'ru'

# если создали свою форму, предствление и шаблон для входа, напр. в templates/sign
# LOGIN_URL = 'sign/login/'
# чтобы регистрироваться и заходить на сайт через механизм пакета allauth
LOGIN_URL = '/accounts/login/'

# после успешного входа в систему пользователь будет перенаправлен на текущую страницу
#LOGIN_REDIRECT_URL = '.'
LOGIN_REDIRECT_URL = '/'

# для создания копий бд django-dbbackup
DBBACKUP_STORAGE = 'django.core.files.storage.FileSystemStorage'
DBBACKUP_STORAGE_OPTIONS = {'location': 'bd-backup/'}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    # Необходимо, чтобы войти в систему по имени пользователя в админке Django, независимо от `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    # специальные методы аутентификации allauth, такие как вход по электронной почте
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
#ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_CONFIRM_EMAIL_ON_GET = True

ACCOUNT_FORMS = {'signup': 'news.forms.BasicSignupForm'}

#EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # для Console Email Backend

#EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'  # для File Email Backend
#EMAIL_FILE_PATH = 'mail-test'  # путь к файлу, в который будут записываться письма

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend' # для aiosmtpd
#EMAIL_HOST = 'localhost'
#EMAIL_PORT = 8025


EMAIL_USE_TLS = False
EMAIL_USE_SSL = True # если сервер использует ssl, включать его здесь обязательно
EMAIL_HOST = 'server.atlant-opt.com' # адрес сервера
#EMAIL_PORT = 25 # порт smtp сервера
EMAIL_PORT = 465 # порт smtp сервера для SSL
#EMAIL_PORT = 587 # порт smtp сервера для TLS
# ваше имя пользователя, например если ваша почта user@yandex.ru, то сюда надо писать user,
# иными словами, это всё то что идёт до собаки
#EMAIL_HOST_USER = '[email protected]'
EMAIL_HOST_USER = 'test@atlant-opt.com'
EMAIL_HOST_PASSWORD = 'kITAnTaT,14-'

DEFAULT_FROM_EMAIL = 'test@atlant-opt.com' # здесь указываем уже свою ПОЛНУЮ почту с которой будут отправляться письма
#DEFAULT_FROM_EMAIL = EMAIL_HOST_USER + '@domen.com'

SERVER_EMAIL = 'test@atlant-opt.com' # это будет у нас вместо аргумента FROM в массовой рассылке

ADMINS = [('admin', 'admin@mail.com')
         # список всех админов в формате ('имя', 'их почта')
]

MANAGERS = [('admin', 'admin@mail.com')
         # список всех менеджеров в формате ('имя', 'их почта')
]

# формат даты, которую будет воспринимать наш задачник
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
# если задача не выполняется за 25 секунд, то она автоматически снимается,
# можете поставить время побольше, но как правило, это сильно бьёт по производительности сервера
APSCHEDULER_RUN_NOW_TIMEOUT = 25  # Seconds
